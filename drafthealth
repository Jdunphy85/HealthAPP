import React, { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

const questions = [
  { id: "age", text: "What is your age?", type: "number" },
  { id: "gender", text: "What is your gender?", type: "select", options: ["Male", "Female", "Other"] },
  { id: "smoker", text: "Do you smoke?", type: "select", options: ["Yes", "No"] },
  { id: "exercise", text: "How many days a week do you exercise?", type: "number" },
  { id: "diet", text: "How healthy is your diet?", type: "select", options: ["Poor", "Fair", "Good", "Excellent"] },
  { id: "sleep", text: "How many hours of sleep do you get per night?", type: "number" },
  { id: "stress", text: "How would you rate your stress level?", type: "select", options: ["Low", "Moderate", "High"] },
  { id: "alcohol", text: "Do you consume alcohol?", type: "select", options: ["Yes", "No"] },
  { id: "bmi", text: "What is your BMI?", type: "number" },
  { id: "familyHistory", text: "Do you have a family history of chronic disease?", type: "select", options: ["Yes", "No"] }
];

// Simulated national health registry comparison logic
const getPeerComparison = (age, gender, score, type) => {
  // Dummy logic to simulate percentile comparison
  const base = gender === "Female" ? 60 : 55;
  const ageFactor = age < 40 ? 5 : age < 60 ? 0 : -5;
  const adjustedBase = base + ageFactor;
  const percentile = Math.round(((100 - score) + adjustedBase) / 2);

  return type === "risk"
    ? `Your risk is lower than approximately ${percentile}% of peers in your age/gender group.`
    : `Your wellness score is higher than approximately ${percentile}% of peers like you.`;
};

const HealthRiskApp = () => {
  const [answers, setAnswers] = useState({});
  const [submitted, setSubmitted] = useState(false);
  const [riskScore, setRiskScore] = useState(null);
  const [wellnessScore, setWellnessScore] = useState(null);
  const [riskComparison, setRiskComparison] = useState("");
  const [wellnessComparison, setWellnessComparison] = useState("");

  const handleChange = (id, value) => {
    setAnswers({ ...answers, [id]: value });
  };

  const calculateScores = () => {
    let risk = 0;
    let wellness = 0;

    // Basic sample scoring logic
    if (answers.smoker === "Yes") risk += 25;
    if (answers.exercise >= 3) wellness += 20;
    if (answers.diet === "Excellent") wellness += 25;
    if (answers.sleep >= 7) wellness += 15;
    if (answers.stress === "High") risk += 15;
    if (answers.familyHistory === "Yes") risk += 20;
    if (answers.bmi >= 30) risk += 15;

    // Normalize and cap scores
    const riskNormalized = Math.min(100, risk);
    const wellnessNormalized = Math.min(100, wellness);

    // Simulate registry comparison
    const riskText = getPeerComparison(
      Number(answers.age),
      answers.gender,
      riskNormalized,
      "risk"
    );
    const wellnessText = getPeerComparison(
      Number(answers.age),
      answers.gender,
      wellnessNormalized,
      "wellness"
    );

    setRiskScore(riskNormalized);
    setWellnessScore(wellnessNormalized);
    setRiskComparison(riskText);
    setWellnessComparison(wellnessText);
    setSubmitted(true);
  };

  return (
    <div className="p-4 max-w-xl mx-auto">
      <h1 className="text-2xl font-bold mb-4">Health Risk & Wellness Score</h1>
      {!submitted ? (
        <form
          onSubmit={(e) => {
            e.preventDefault();
            calculateScores();
          }}
        >
          {questions.map((q) => (
            <Card key={q.id} className="mb-4">
              <CardContent>
                <label className="block mb-2 font-semibold">{q.text}</label>
                {q.type === "select" ? (
                  <select
                    className="w-full border px-2 py-1"
                    onChange={(e) => handleChange(q.id, e.target.value)}
                    required
                  >
                    <option value="">Select</option>
                    {q.options.map((opt) => (
                      <option key={opt} value={opt}>
                        {opt}
                      </option>
                    ))}
                  </select>
                ) : (
                  <input
                    type={q.type}
                    className="w-full border px-2 py-1"
                    onChange={(e) => handleChange(q.id, e.target.value)}
                    required
                  />
                )}
              </CardContent>
            </Card>
          ))}
          <Button type="submit">Calculate</Button>
        </form>
      ) : (
        <div className="text-center">
          <h2 className="text-xl font-semibold mb-4">Your Scores</h2>
          <p className="mb-2">Risk Score: <strong>{riskScore}</strong> / 100</p>
          <p className="mb-2">{riskComparison}</p>
          <p className="mb-4">Wellness Score: <strong>{wellnessScore}</strong> / 100</p>
          <p className="mb-4">{wellnessComparison}</p>
          <Button onClick={() => setSubmitted(false)}>Retake Assessment</Button>
        </div>
      )}
    </div>
  );
};

export default HealthRiskApp;
